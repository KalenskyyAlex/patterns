// Патерн отримувача створює зв'язки по типу один-до-багатьох. Якщо необхідні дані у 
// суб'єкта(один) змінюються, то отримувачі(багато) окликаються.
//
// Принцип:
// Реалізовується через "реєстрацію" і "скасування реєстрації":
// Об'єкт, дані якого нам потрібні, реалізовує інтерфейс ISubject, що забезпечує можливість реєстрації і
// сповіщення
// Об'єкт, який хоче отримувати дані має реалізовувати інтерйефс IObserver, що забезпечує можливість його
// виклику при сповіщіенні Subject методом update (наприклад)
// В рантайм Subject додаЄ і вилучає об'єкти які будуть сповіщатися і оновлюватися, відповідно
//
// Переваги:
// - Subject i Observer пов'язані слабко - вони лише знають, що кожен реалізує відповідний інтерфейс
// - Дозволяє створювати нові Subject i Observer не змінюючи жодним чином інші класи
// - Дозвляє реєструвати і скасовувати "підписку" отримувачів під час роботи програми
//
// 
// ЛЕГЕНДА
// 
// Треба створити програму, яка відображає погодні показники, що беруться з об'єкту WeatherData
// різними способами (Display)
// Сторонні розробники можуть додавати свої Display (API)
//
// Проблема: 
// Можливість стороннім розробником створювати новi Display не дасть нам просто записати оновлення всіх
// класів в ручну в клас WeatherData
//
// В цьому випадку нам допоможе патерн отримувача


// Тестовий модуль
namespace WeatherApp
{
    class Program
    {
        static void Main(string[] args)
        {
            WeatherData weatherData = new WeatherData();

            IObserver display1 = new CurrentConditionsDisplay(weatherData);
            IObserver display2 = new StatisticsDisplay(weatherData);
            IObserver display3 = new ForecastDisplay(weatherData);

            weatherData.setMeasurments(); // Всі три Display оновлюються
            weatherData.removeObserver(display3); 
            weatherData.setMeasurments(); // display3 не оновлюється, адже він більше не отримує сповіщень
        }
    }
}
