using System;

// Перш ніж продовжити читати, перегляньте уважніше клас Waiter
//
// Отож ми вже виявили, що просто обійтися ітераторами не вийде. В жодному разі ми не збираємося від
// них відмовитися - адже це сильний інструмент - але ми вийшли на новий рівень дизайну нашого коду
// Для великого нового рівня треба великий новий інструмент - патерн-композит. В чому його суть?
//
//    кожен елемент(Меню) може містити як і собі подібні елементи (Вкладені меню, які теж можуть
//    містити вкладені меню і т.д., доки у замовників вистачить фантазії) так і кінцеві елементи,
//    зберігання яких нас цікавить
//    
//    можна собі це уявити як дерево, в основі якого основне меню, кожне розгалуження це вкладені
//    меню і кінці "гілок" це власне страви, які нам треба відобразити
// 
// Отож, поїхали!



// Тестовий модуль
namespace Restaurant
{
    class Program
    {
        static void Main(string[] args)
        {
            TreeElement MainMenu = new MainMenu();

            TreeElement DrinksMenu = new DrinksMenu();
            MainMenu.addChild(DrinksMenu);

            Waiter waiter = new Waiter(MainMenu);
            waiter.printFullMenu();
        }
    }
}
