using System;

// Патерн-адаптер - коли треба пристосувати старий код до нового, але переписувати все заново не хочеться. Якщо точніше, 
// ми створюємо новий клас, який наслідує новий інтерфейс і допомагає старому класу реалізувати цей інтерфейс
// 
// Поки це найкоротший опис серед усіх. Про переваги писати немає сенсу, так як є конкретне застосування
// Недоліки:
// - підійде далеко не завжди: якщо не можна зробити щось нове на базі старого, все доведеться робити заново
//
//
// ЛЕГЕНДА:
// Раніше ми використовували великий дисплей, який відображав час, заряд і повідомлення на екрані. Але наш роботодавець попросив
// зробити відображення цієї інформації більш мінімалістичним, лишивши невелику смужку вгорі. Що робити? Переписувати все заново?
// На щастя, в даному випадку можна обійтися адаптер-патерном.

// тестовий модуль
namespace Adapter
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Test 1");
            // Наш старий варіант
            IOldDisplay display1 = new OldDisplay();
            display1.DisplayAll();

            Console.WriteLine("Test 2");
            // Новий, покращений варіант
            INewDisplay display2 = new DisplayAdapter(display1);
            display2.DisplayAll();
        }
    }
}
