using System;


// Можливо, ви пам'ятаєте наш автомат жуйок.
// За ЛЕГЕНДОЮ тепер нам треба написати віддалений екран, який може витягувати дані з нашого автомату
// і виводити їх, скажімо, на якомусь комп'ютері (Monitor)
// 
// Але нам би не хотілося змінювати код GumBallMachine для реалізації мережі, та й хотілося б максмиально
// спростити роботу клієнта, щоб і він не займався мережевими штуками
// Тому ми напишемо ПРОКСІ. Тобто це клас(класи) які займаються всередині мережевим з'єднанням, доступом,
// безпекою, а ззовні себе поводять так, ніби GumBallMachine i Monitor звертаються один до одного напряму,
// ніби вони знаходяться в одному проекті
//
// В цьому і полягає проксі патер
//
//      Проксі патерн надає видимість звертанням до об'єкта напряму, займаючись контролем доступу до справжнього
//      об'єкта
// 
// Ви могли помітити, що ніяких мережевих з'єднань у визначенні нема. Так і є! Ми можемо за допомогою класу
// проксі робити багато інших речей, таких як обмежений доступ, які ніяк не пов'язані з мережевим з'єднанням
// Але наступний приклад з сервером-клієнтом просто чудово демонструє застосування проксі

// ТЕСТИМО
namespace Monitor
{
    class Program
    {
        static void Main(string[] args)
        {
            // Як бачите, клас ClientHelper реалізовує інтерфейс ClientHelper,
            // а отже ззовні (для класу Monitor) це виглядає ніби ми не проходимо через десь 
            // кіл пекла, а просто звертаємося до якоїсь локальної GumBallMachine - сила проксі!
            IGumBallMachine.IGumBallMachine clientHelper = new ClientHelper();
            Monitor monitor = new Monitor(clientHelper);


            // І не забудьте перед цим запустити наш сервер - проект GumBallMachine.sln
            // Можете проексперементувати - які б дані ви не вводили там, вони будуть перетягуватися 
            // сюди
            monitor.DisplayInfo();
        }
    }
}
